@grammar fire
 @compiler js
 @keywords
  #!
  term
  nt
 @catchAllKeyword error
 @parser js ./fireProgram.js
@keyword #!
 @columns any*
 @compiler js
  @sub // #! {any*}
@keyword error
 @parser js ErrorNode
 @compiler js
  @sub // error
@keyword nt
 @keywords
  term
  nt
 @ohayoTileSize 100 100
 @ohayoTileClass BasicTile /aientist/client/tiles/BasicTile.js
@keyword term
@keyword assignment term
@keyword >morph nt
 @ohayoTileSize 420 200
 @ohayoTileClass MorphTile /aientist/client/tiles/MorphTile.js
@keyword log@ term
 @description Log variable(s) to console
 @columns identifier*
 @compiler js
  @sub console.log({identifier*})
  @listDelimiter , 
 @frequency .5
 @ohayoSvg printer
@keyword log$ term
 @description Log string to console
 @columns any*
 @compiler js
  @sub console.log("{any*}")
 @frequency .51
 @ohayoSvg printer
@keyword require term
 @description Require Something
 @ohayoSvg import
 @columns identifier filepath
 @compiler js
  @sub const {identifier} = require("{filepath}")
 @frequency .1
@keyword export term
 @description Export This
 @ohayoSvg export
 @columns identifier
 @compiler js
  @sub module.exports = {identifier}
 @frequency .1
@keyword set# assignment
 @description Number Assignment
 @columns identifier number
 @compiler js
  @sub const {identifier} = {number}
 @frequency .3
 @ohayoSvg hashtag
@keyword set? assignment
 @description Boolean Assignment
 @columns identifier boolean
 @compiler js
  @sub const {identifier} = {boolean}
 @frequency .04
 @ohayoSvg hashtag
@keyword set$ assignment
 @description String Assignment
 @columns identifier any*
 @compiler js
  @sub const {identifier} = "{any*}"
 @frequency .2
 @ohayoSvg font-1
@keyword join assignment
 @description Join strings to form new string
 @columns identifier identifier*
 @compiler js
  @sub const {identifier} = [{identifier*}].join("")
  @listDelimiter , 
 @frequency .2
 @ohayoSvg font-1
@keyword set#+ assignment
 @description Add Numbers
 @columns identifier any*
 @compiler js
  @sub const {identifier} = [{any*}].reduce((sum, num) => sum + num)
  @listDelimiter , 
 @frequency .1
 @ohayoSvg add
@keyword set?< set?
 @description Less than test
 @columns identifier any any
 @compiler js
  @sub const {identifier} = {any} < {any}
 @frequency .1
 @ohayoSvg lt
@keyword set?<= set?
 @description Less than or equal to test
 @columns identifier any any
 @compiler js
  @sub const {identifier} = {any} <= {any}
 @frequency .1
 @ohayoSvg lt-eq
@keyword set?> set?
 @description Greater than test
 @columns identifier number number
 @compiler js
  @sub const {identifier} = {number} > {number}
 @frequency .1
@keyword set?>= set?
 @description Greater than or equal to test
 @columns identifier number number
 @compiler js
  @sub const {identifier} = {number} >= {number}
 @frequency .1
@keyword set## assignment
 @columns identifier any*
 @compiler js
  @sub const {identifier} = {any*}
 @frequency .2
 @ohayoSvg hashtag
@keyword set#- set##
 @description Subtract Numbers
 @compiler js
  @listDelimiter  - 
 @ohayoSvg minus
@keyword set#/ set##
 @description Divide Numbers
 @compiler js
  @listDelimiter  / 
@keyword set#% set##
 @description Modulo Numbers
 @compiler js
  @listDelimiter %
@keyword set#* set##
 @description Multiply Numbers
 @compiler js
  @listDelimiter  * 
 @ohayoSvg multiply
@keyword set#~ assignment
 @description Mutable Number Assignment
 @columns identifier number
 @compiler js
  @sub let {identifier} = {number}
@keyword -- term
 @description Decrement
 @columns identifier
 @compiler js
  @sub {identifier}--
 @frequency .1
@keyword ++ term
 @description Increment
 @frequency .3
 @columns identifier
 @compiler js
  @sub {identifier}++
@keyword set#[] assignment
 @description Number Array Assignment
 @columns identifier number*
 @frequency .4
 @compiler js
  @sub const {identifier} = [{number*}]
  @listDelimiter , 
@keyword set*>> assignment
 @description Function Call
 @frequency .5
 @ohayoSvg call
 @columns identifier identifier any*
 @compiler js
  @sub const {identifier} = {identifier}({any*})
  @listDelimiter , 
@keyword >> term
 @description Function call ignore result.
 @frequency .1
 @ohayoSvg call
 @columns identifier any*
 @compiler js
  @sub {identifier}({any*})
  @listDelimiter , 
@keyword set.>> assignment
 @description Method Call
 @frequency .5
 @columns identifier identifier identifier any*
 @compiler js
  @sub const {identifier} = {identifier}.{identifier}({any*})
  @listDelimiter , 
@keyword return term
 @columns any
 @compiler js
  @sub return {any}
 @frequency .1
 @ohayoSvg nw
@keyword jsblock nt
 @compiler js
  @openChildren  {
  @closeChildren }
@keyword setfn jsblock
 @description Function Assignment
 @columns identifier any*
 @compiler js
  @sub const {identifier} = ({any*}) =>
  @listDelimiter , 
 @frequency .1
 @ohayoSvg function
@keyword block jsblock
 @description block of code
 @ohayoSvg fork
 @frequency .2
 @compiler js
  @sub /* {identifier} */
@keyword if jsblock
 @description If tile
 @ohayoSvg fork
 @columns identifier
 @frequency .2
 @compiler js
  @sub if ({identifier})
@keyword while jsblock
 @description While tile
 @columns identifier
 @frequency .1
 @compiler js
  @sub while ({identifier})